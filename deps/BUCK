COMPATIBLE_WITH_BASE = [
  "ovr_config//os:macos",
  "ovr_config//os:linux",
  "ovr_config//os:windows",
]


# from https://github.com/mackron/miniaudio
# Just compile miniaudio.c like any other source file and include miniaudio.header
# a normal header. There's no need to install any dependencies.
# On Windows and macOS there's no need to link to anything.
# On Linux and BSD just link to -lpthread and -lm. 
# On iOS you need to compile as Objective-C. Link to -ldl if you get errors about dlopen(), etc.
# If you get errors about undefined references to __sync_val_compare_and_swap_8, __atomic_load_8, etc. you need to link with -latomic.

cxx_library(
  name = "miniaudio",
  srcs = [
    "miniaudio/miniaudio.c",
  ],
  compatible_with = COMPATIBLE_WITH_BASE,
  link_style="static",
  compiler_flags = [],
  include_directories = [
    ".",
  ],
  preprocessor_flags = [],
  raw_headers = [
    "miniaudio/miniaudio.h",
  ],
  exported_headers = [
    "miniaudio/miniaudio.h",
  ],
  public_include_directories = [
    ".",
    "miniaudio/"
  ],
  exported_linker_flags = select({
    "DEFAULT": [],
    "ovr_config//os:linux": [
      "-lm",
      "-lpthread",
      # uncomment if errors about dlopen 
      # "-ldl"
    ],
  }),
  visibility = ["PUBLIC"],
  deps = [],
)


# instructions to build from source for glfw are essentially non-existent
# i've created a working static library splicing information from multiple sources
# if you do update the git submodule version and run into errors
# these are helpful links to look at to figure out build issues

# from https://github.com/glfw/glfw
# from https://www.glfw.org/docs/latest/compile.html
# from https://github.com/glfw/glfw/blob/master/src/platform.h
# from https://github.com/glfw/glfw/blob/master/src/CMakeLists.txt

cxx_library(
  name = "glfw",
  srcs = [
    "glfw/src/context.c",
    "glfw/src/egl_context.c",
    "glfw/src/init.c",
    "glfw/src/input.c",
    "glfw/src/monitor.c",
    "glfw/src/osmesa_context.c",
    "glfw/src/vulkan.c",
    "glfw/src/window.c",
    "glfw/src/platform.c",
    "glfw/src/posix_module.c",
    "glfw/src/posix_poll.c",
    "glfw/src/null_init.c",
    "glfw/src/null_joystick.c",
    "glfw/src/null_monitor.c",
    "glfw/src/null_window.c",
    ] + select({
    "ovr_config//os:linux": [
      "glfw/src/glx_context.c",
      "glfw/src/linux_joystick.c",
      "glfw/src/posix_thread.c",
      "glfw/src/posix_time.c",
      "glfw/src/x11_init.c",
      "glfw/src/x11_monitor.c",
      "glfw/src/x11_window.c",
      "glfw/src/xkb_unicode.c",
    ],
    "ovr_config//os:macos": [
      "glfw/src/cocoa_init.m",
      "glfw/src/cocoa_joystick.m",
      "glfw/src/cocoa_monitor.m",
      "glfw/src/cocoa_time.c",
      "glfw/src/cocoa_window.m",
      "glfw/src/nsgl_context.m",
      "glfw/src/posix_thread.c",
      
    ],
    "ovr_config//os:windows": [
      "glfw/src/wgl_context.c",
      "glfw/src/win32_init.c",
      "glfw/src/win32_joystick.c",
      "glfw/src/win32_monitor.c",
      "glfw/src/win32_thread.c",
      "glfw/src/win32_time.c",
      "glfw/src/win32_window.c",
      "glfw/src/win32_module.c",
    ],
  }),
  compatible_with = COMPATIBLE_WITH_BASE,
  link_style="static",
  compiler_flags = [],
  include_directories = ["."],
  preprocessor_flags = select({
    "DEFAULT": [],
    "ovr_config//os:macos":[
      "-D_GLFW_COCOA",
      "-D_GLFW_USE_CHDIR",
      "-D_GLFW_USE_MENUBAR",
      "-D_GLFW_USE_RETINA",
    ],
    "ovr_config//os:linux":[
      "-D_GLFW_X11",
    ],
    "ovr_config//os:windows":[
      "-D_GLFW_WIN32",
      "-D_GLFW_EXPOSE_NATIVE_WIN32",
    ],
  }),
  public_include_directories = [
      "glfw/include",
    ],
  exported_linker_flags = select({
    "DEFAULT": [],
    "ovr_config//os:macos": [
      "-Wl,-framework,Cocoa",
      "-Wl,-framework,CoreFoundation",
      "-Wl,-framework,CoreVideo",
      "-Wl,-framework,IOKit",
      "-Wl,-framework,OpenGL",
      "-Wl,-framework,Metal",
      "-Wl,-framework,Carbon",
      "-Wl,-framework,QuartzCore",
    ],
    "ovr_config//os:windows": [
      "/DEFAULTLIB:opengl32.lib",
      "/DEFAULTLIB:gdi32.lib",
      "/DEFAULTLIB:user32.lib",
      "/DEFAULTLIB:shell32.lib",
    ]
  }),
  exported_headers = glob(["glfw/include/**/*.h"]),
  raw_headers = glob(["glfw/src/**/*.h"]),
  visibility = ["PUBLIC"],
  deps = [],
)

# pretty straightforward drag and drop library
# from https://learnopengl.com/Getting-started/Creating-a-window
cxx_library(
  name = "glad",
  srcs = [
    "glad/src/glad.c",
  ],
  raw_headers = glob([
    "glad/include/glad/glad.h",
    "glad/include/KHR/khrplatform.h",
  ]),
  exported_headers = glob([
    "glad/include/glad/glad.h"
  ]),
  include_directories = ["."],
  public_include_directories = [
    "glad/include",
  ],
  compatible_with = COMPATIBLE_WITH_BASE,
  link_style="static",
  visibility = ["PUBLIC"],
  deps = [],
)

# straight forward drag and drop library 
# from https://github.com/google/googletest
# includig googletest also gives us minimal gflags functionality
# GTEST_DEFINE_*_ where * is among (bool, int32, string)

cxx_library(
    name = "gtest",
    srcs = glob(
        include = [
            "googletest/googletest/src/*.cc",
            "googletest/googlemock/src/*.cc",
        ],
        exclude = [
            "googletest/googletest/src/gtest-all.cc",
            "googletest/googletest/src/gtest_main.cc",
            "googletest/googlemock/src/gmock-all.cc",
            "googletest/googlemock/src/gmock_main.cc",
        ],
    ),
    compatible_with = COMPATIBLE_WITH_BASE,
    exported_headers = glob([
        "googletest/googletest/include/gtest/*.h",
        "googletest/googlemock/include/gmock/*.h",
    ]),
    compiler_flags = select({
        "config//os:macos": [],
        "config//os:linux": [],
        "config//os:windows": [],
        "DEFAULT": [
          "-lpthread",
          "-std=c++20",
        ],
    }),
    public_include_directories = [
        "googletest/googlemock",
        "googletest/googlemock/include",
        "googletest/googletest",
        "googletest/googletest/include",
    ],
    link_style = "static",
    linker_flags = select({
        "config//os:windows": [],
        "config//os:macos": [
            "-lm",
            "-lpthread",
        ],
        "config//os:linux": [
            "-lm",
            "-lpthread",
        ],
        "DEFAULT": ["-pthread"],
    }),
    visibility = ["PUBLIC"],
)
